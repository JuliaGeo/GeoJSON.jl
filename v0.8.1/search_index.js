var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = GeoJSON","category":"page"},{"location":"#GeoJSON","page":"Home","title":"GeoJSON","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for GeoJSON.","category":"page"},{"location":"","page":"Home","title":"Home","text":"See the GeoInterfaces.jl and Tables.jl documentation for most applicable methods.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [GeoJSON]","category":"page"},{"location":"#GeoJSON.GeoJSON","page":"Home","title":"GeoJSON.GeoJSON","text":"GeoJSON\n\n(Image: ) (Image: ) (Image: CI) (Image: codecov)\n\nRead GeoJSON files using JSON3.jl, and provide the Tables.jl interface.\n\nThis package is heavily inspired by, and borrows code from, JSONTables.jl, which does the same thing for the general JSON format. GeoJSON puts the geometry in a geometry column, and adds all properties in the columns individually.\n\nUsage\n\nGeoJSON only provides simple read and write methods. GeoJSON.read takes a file path, string, IO, or bytes.\n\njulia> using GeoJSON, DataFrames\n\njulia> fc = GeoJSON.read(\"path/to/a.geojson\")\nFeatureCollection with 171 Features\n\njulia> first(fc)\nFeature with geometry type Polygon and properties Symbol[:geometry, :timestamp, :version, :changeset, :user, :uid, :area, :highway, :type, :id]\n\n# use the Tables interface to convert the format, extract data, or iterate over the rows\njulia> df = DataFrame(fc)\n\n# write to string\njulia> write(fc)\n\"{\\\"type\\\":\\\"FeatureCollection\\\",\\\"features\\\":[{\\\"type\\\":\\\"Feature\\\",\\\"geometry\\\":{\\\"type\\\":\\\"Polygon\\\",\\\"coordinates\\\":[[[-69.99693762899992...\n\nHTTP access\n\nTo read JSON from a URL, use HTTP.jl\n\n\njulia> using GeoJSON, HTTP\n\njulia> resp = HTTP.get(\"https://path/to/file.json\")\n\njulia> fc = GeoJSON.read(resp.body)\n\n\n\n\n\n","category":"module"},{"location":"#GeoJSON.CRS","page":"Home","title":"GeoJSON.CRS","text":"CRS(type::String, properties::Dict{String,Any})\n\nA Coordinate Reference System for compatibility. Should not be used, as it is not part of the GeoJSON specification. The CRS of a GeoJSON object is always WGS84.\n\n\n\n\n\n","category":"type"},{"location":"#GeoJSON.Feature","page":"Home","title":"GeoJSON.Feature","text":"Feature{D,T}(id::Union{String,Nothing}, bbox::Union{Nothing,Vector{T}}, geometry::Union{Nothing,AbstractGeometry{D,T}}, properties::Union{Nothing,Dict{String,Any}})\n\nA Feature with D dimensional geometry.\n\n\n\n\n\n","category":"type"},{"location":"#GeoJSON.FeatureCollection","page":"Home","title":"GeoJSON.FeatureCollection","text":"FeatureCollection{D,T}(bbox::Union{Nothing,Vector{T}}, features::Vector{Feature{D,T}}, crs::Union{Nothing,CRS})\n\nA FeatureCollection with D dimensional geometry in its features.\n\n\n\n\n\n","category":"type"},{"location":"#GeoJSON.GeometryCollection","page":"Home","title":"GeoJSON.GeometryCollection","text":"GeometryCollection{D,T}(geometries::Vector{AbstractGeometry{D,T}})\n\nA GeometryCollection geometry with D dimensions.\n\n\n\n\n\n","category":"type"},{"location":"#GeoJSON.LazyFeatureCollection","page":"Home","title":"GeoJSON.LazyFeatureCollection","text":"LazyFeatureCollection{D,T}(bbox::Union{Nothing,Vector{T}}, features::Vector{LazyFeature{D,T}}, crs::Union{Nothing,String})\n\nA FeatureCollection with D dimensional geometry in its features, but its features are lazily parsed from the GeoJSON string. Indexing into the collection will parse the feature. This can be more efficient when interested in only a few features from a large collection, or parsing a very large collection iteratively without loading it all into memory.\n\n\n\n\n\n","category":"type"},{"location":"#GeoJSON.LineString","page":"Home","title":"GeoJSON.LineString","text":"LineString{D,T}(coordinates::Union{Nothing,Vector{NTuple{D,T}}})\n\nA LineString geometry with D dimensions.\n\n\n\n\n\n","category":"type"},{"location":"#GeoJSON.MultiLineString","page":"Home","title":"GeoJSON.MultiLineString","text":"MultiLineString{D,T}(coordinates::Union{Nothing,Vector{Vector{NTuple{D,T}}}})\n\nA MultiLineString geometry with D dimensions.\n\n\n\n\n\n","category":"type"},{"location":"#GeoJSON.MultiPoint","page":"Home","title":"GeoJSON.MultiPoint","text":"MultiPoint{D,T}(coordinates::Union{Nothing,Vector{NTuple{D,T}}})\n\nA MultiPoint geometry with D dimensions.\n\n\n\n\n\n","category":"type"},{"location":"#GeoJSON.MultiPolygon","page":"Home","title":"GeoJSON.MultiPolygon","text":"MultiPolygon{D,T}(coordinates::Union{Nothing,Vector{Vector{Vector{NTuple{D,T}}}}})\n\nA MultiPolygon geometry with D dimensions.\n\n\n\n\n\n","category":"type"},{"location":"#GeoJSON.Point","page":"Home","title":"GeoJSON.Point","text":"Point{D,T}(coordinates::Union{Nothing,NTuple{D,T}})\n\nA Point geometry with D dimensions.\n\n\n\n\n\n","category":"type"},{"location":"#GeoJSON.Polygon","page":"Home","title":"GeoJSON.Polygon","text":"Polygon{D,T}(coordinates::Union{Nothing,Vector{Vector{NTuple{D,T}}}})\n\nA Polygon geometry with D dimensions.\n\n\n\n\n\n","category":"type"},{"location":"#GeoJSON.read-Tuple{Any}","page":"Home","title":"GeoJSON.read","text":"GeoJSON.read(json; lazyfc=false, ndim=2, numbertype=Float32)\n\nRead GeoJSON to a GeoInterface.jl compatible object.\n\nArguments\n\njson: A file path, string, IO, or bytes (AbstractVector{UInt8) containing JSON to read.\nlazyfc::Bool=false: When reading in huge featurecollections (1M+ features),   set lazyfc=true to only parse them into memory when accessed.\nndim::Int=2: Use 3 for 3D geometries, which is also used when 2D parsing fails.\nnumbertype::DataType=Float32: Use Float64 when the precision is required.\n\n\n\n\n\n","category":"method"},{"location":"#GeoJSON.write-Tuple{Any, GeoJSON.GeoJSONT}","page":"Home","title":"GeoJSON.write","text":"write([io], geometry)\n\nWrite a GeoInterface.jl compatible feature or geometry to a GeoJSON String.\n\nio may be a filename String or IO object.\n\n\n\n\n\n","category":"method"}]
}
